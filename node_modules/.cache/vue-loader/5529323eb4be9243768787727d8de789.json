{"remainingRequest":"C:\\Users\\Mike\\Documents\\VueJs\\test\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js??vue-loader-options!C:\\Users\\Mike\\Documents\\VueJs\\test\\node_modules\\cache-loader\\dist\\cjs.js??ref--1-0!C:\\Users\\Mike\\Documents\\VueJs\\test\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\Mike\\Documents\\VueJs\\test\\src\\components\\Countries.vue?vue&type=template&id=418e18b4&scoped=true&","dependencies":[{"path":"C:\\Users\\Mike\\Documents\\VueJs\\test\\src\\components\\Countries.vue","mtime":1647015539780},{"path":"C:\\Users\\Mike\\Documents\\VueJs\\test\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\Mike\\Documents\\VueJs\\test\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":499162500000},{"path":"C:\\Users\\Mike\\Documents\\VueJs\\test\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\Mike\\Documents\\VueJs\\test\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}